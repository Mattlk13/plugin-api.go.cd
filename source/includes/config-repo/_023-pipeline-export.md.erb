## Pipeline export

This message is a request to the plugin to convert a pipeline configuration into the plugin's native format. It is
essentially the reverse of the [`parse-directory` request](#parse-directory).

<p class='request-name-heading'>Request name</p>

`pipeline-export`

<p class='request-body-heading'>Request body</p>

> Given the following config XML snippet (assume this pipeline is in a group named `my-group`) —

```xml
<pipeline name="my-pipeline">
  <materials>
    <git url="https://my.repo/path/to.git" />
  </materials>
  <stage name="first-stage">
    <jobs>
      <job name="first-job">
        <tasks>
          <exec command="/bin/echo">
            <arg>hello</arg>
            <runif status="passed" />
          </exec>
        </tasks>
      </job>
    </jobs>
  </stage>
</pipeline>
```

The request body will contain a JSON object with an attribute `pipeline`, which contains a JSON representation of a full pipeline configuration. For a more detailed example showing, see the [`parse-directory` request body](#parse-directory).

> The plugin will receive the following JSON body —

```json
{
  "pipeline": {
    "group": "my-group",
    "name": "my-pipeline",
    "label_template": "${COUNT}",
    "lock_behavior": "none",
    "mingle": {
      "mql_grouping_conditions": "\"\""
    },
    "environment_variables": [],
    "parameters": [],
    "materials": [
      {
        "url": "https://my.repo/path/to.git",
        "branch": "master",
        "shallow_clone": false,
        "filter": {
          "ignore": [],
          "whitelist": []
        },
        "auto_update": true,
        "type": "git"
      }
    ],
    "stages": [
      {
        "name": "first-stage",
        "fetch_materials": true,
        "never_cleanup_artifacts": false,
        "clean_working_directory": false,
        "approval": {
          "type": "success",
          "users": [],
          "roles": []
        },
        "environment_variables": [],
        "jobs": [
          {
            "name": "first-job",
            "environment_variables": [],
            "tabs": [],
            "resources": [],
            "artifacts": [],
            "properties": [],
            "run_instance_count": "0",
            "tasks": [
              {
                "command": "/bin/echo",
                "timeout": -1.0,
                "arguments": [
                  "hello"
                ],
                "run_if": "passed",
                "type": "exec"
              }
            ]
          }
        ]
      }
    ]
  }
}
```

<h3><!-- Force a break/clear --></h3>

<p class="response-example-heading">Response example</p>

Here is an example response from the GoCD YAML Configuration Plugin:

```http
HTTP/1.1 200 OK
Content-Type: application/x-yaml; charset=utf-8
X-Export-Filename: my-pipeline.gocd.yaml

{
  "pipeline": "\"format_version: 3\\npipelines:\\n  my-pipeline:\\n    group: my-group\\n    label_template: ${COUNT}\\n    lock_behavior: none\\n    materials:\\n      git:\\n        git: https://my.repo/path/to.git\\n        shallow_clone: false\\n        auto_update: true\\n        branch: master\\n    stages:\\n    - first-stage:\\n        fetch_materials: true\\n        keep_artifacts: false\\n        clean_workspace: false\\n        approval:\\n          type: success\\n        jobs:\\n          first-job:\\n            tasks:\\n            - exec:\\n                arguments:\\n                - hello\\n                command: /bin/echo\\n                run_if: passed\\n\""
}
```

<p class='response-code-heading'>Response code</p>

The plugin is expected to return status `200` if it can understand the request.

<p class='response-body-heading'>Response body</p>

The plugin is expected to return a JSON object (corresponding to
[`PipelineExportResponseMessage`](https://github.com/gocd/gocd/blob/master/plugin-infra/go-plugin-access/src/main/java/com/thoughtworks/go/plugin/access/configrepo/v3/messages/PipelineExportResponseMessage.java). The response body contains a single attribute:

#### `pipeline`

This `pipeline` element is a string representation of the exported pipeline configuration in the native format supported by the plugin. The value of this element must deserialize to a `string`.

<p class="response-headers-heading">Response headers</p>

The plugin response must also set the following headers:

#### `Content-Type`

Plugin responses are expected to provide a MIME type to indicate how to treat the content of the `pipeline` attribute. Here are some examples of common MIME types:

* `text/plain; charset=utf-8`
* `application/json; charset=utf-8`
* `application/x-yaml; charset=utf-8`

#### `X-Export-Filename`

Plugin responses must also suggest a filename for the exported content. This is used by GoCD to construct a `Content-Disposition` header for REST API responses.
